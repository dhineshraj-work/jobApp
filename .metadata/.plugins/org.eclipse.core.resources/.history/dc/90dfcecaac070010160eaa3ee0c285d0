package com.dhinesh.loginService.controller;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.dhinesh.loginService.dto.AuthRequest;
import com.dhinesh.loginService.dto.JwtResponse;
import com.dhinesh.loginService.model.Role;
import com.dhinesh.loginService.model.UserDetailsModel;
import com.dhinesh.loginService.model.UserHistoryModel;
import com.dhinesh.loginService.model.UserModel;
import com.dhinesh.loginService.repo.UserRepo;
import com.dhinesh.loginService.model.CustomDateModel;
import com.dhinesh.loginService.service.JwtService;



@RestController
@RequestMapping("/job/public")
public class LoginController {
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private JwtService jwtService;
	
	@Autowired
	private UserRepo userRepo;
	
	@PostMapping("login")
	public ResponseEntity<Object> login(@RequestBody AuthRequest authRequest){
		try {
			Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getEmail(), authRequest.getPassword()));
			if(authentication.isAuthenticated()) {
				
				UserModel userModel = userRepo.findByEmail(authRequest.getEmail()).orElse(null);
				userModel.getUserHistory().setLastLoginDate(currentDate());
				userRepo.save(userModel);
				
				String token = jwtService.generateToken(authRequest.getEmail());
				//return ResponseEntity.ok(new JwtResponse(token, 200));
				return ResponseEntity.ok(userRepo.findByEmail(authRequest.getEmail()).orElse(null));
			}
			return ResponseEntity.status(401).body("Bad Credentials");
		}catch(Exception e) {
			return ResponseEntity.status(500).body(e);
		}
	}
	
	public String currentDate() {
		
		CustomDateModel dateModel = new CustomDateModel(new Date(System.currentTimeMillis()));
		return dateModel.toString();
	}
	
	@GetMapping("body")
	public ResponseEntity<Object> body(){
		return ResponseEntity.ok(new UserHistoryModel());
	}
}
